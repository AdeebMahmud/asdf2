The layout for the simulation (main.py)

Classes:
    MindController
        __init__(self, s)

        int sidelength
        matrix intersections
        list portals
        int ticks

        void initinter(self, s)
        Portal decidedest(self, p)
        list pathfind(self, origin, dest)
        void? onetick(self)

    Intersection
        __init__(self, gc)

        list adjacents
        Middle middle
        list gridcoords
        list roads

        Sidewalk s1, s2, s3, s4

    Road
        __init__(self, p)

        Lane lef, forward, right
        list lanes
        Intersection parent
        ZebraCrossing crossing
        Light light
        list temp

        void giveroad(self, obj)
        void onetick(self)

    Lane
        __init__(self, d, parent, c)

        liist cars
        char direction
        Road parentroad
        int capacity

    ZebraCrossing
        __init__(self, parent)

        bool occupied
        int numberofpedestrians
        Light pedlight
        Road parentroad

    Light
        __init__(self, parent)

        char state
        char parenttype
        ZebraCrossing/Road parent

    Middle
        __init__(self, parent)

        matrix squares
        Intersection parent
        static int middlesize

    Sidewalk
        __init__(self, p, c1, c2)

        Intersection parent
        list peds
        ZebraCrossing crossing1, crossing2

    Portal
        __init__(self, road, pos)

        list cars
        list peds
        Road adjroad
        list finished
        int position

        static float carprob
        satic float pedprob

        void createcar(self)
        void createped(self)
        void deleteobj(self, c)
        void releasesome(self)
        void deletefinished(self)
        void onetick(self)

    Car
        __ini__(self, p)

        Portal/Lane/Middle parent
        Portal destination
        list path
        list coords
        list motionvector
        bool reacheddest

    Pedestrian
        __init__(self, p)

        float walkingspeed
        Sidewalk parent
        bool reacheddest
        bool iswalkking
        float waitingtimeleft

        float decidewalkingspeed(self)


General:
A tick is 1/10 a second
Every time we go through we immediaely decrease all reaction time/waiting time variables by 0.1 (one tick length in seconds)


Car/Ped generation:
Every tick MindController calls onetick() on all Portal Classes
The Portals decide based on random numbers whether to create a new Car and/or Pedestrian
    If one does, a Car and/or Pedestrian is made inside the Portal
    The destination(s) is/are decided as another portal with different field "position", which is 0, 1, 2, 3
    This way cars and people behave realistically

Then the cars/peds are given to the "temp" field of the adjacent road
The MindController then calls onetick() on the Roads
    The Roads go through their "temp" field and sort the cars and pedestrians
        If it is a Car then it looks at the first Intersection in Car.path and figures out if it's up, down, left, right based on Intersection.gridcoords
        Then places the Car in the appropriate Lane
        If it is a Pedestrian then it checks Pedestrian.walkingtimeleft
            If it is > 0 we leave the Ped in Road.temp and decrease walkingtimeeft by a constant
            If it is None, then we get the Road's length and get walkingtimeleft directly proportional to that, and do nothing else
            If is <= 0 we then give append the ped to Sidewalk.peds of the left sidewalk adjacent to the current Road and reset walkingtimeleft to None


Stuff inside road:
    Everytime onetick() is called on Road:
        It runs the neural network and changes Road.light.state accordingly
        It then calls onetick() on all 3 lanes:
            The Lane goes through Lane.cars that aren't None and don't have Car.reationdelay = None and does Car.reactiondelay -= 0.1
        Then it finds the first Car in Lane.cars that isn't None
            If Car.reactiondelay <= 0 then we check Middle.square[y][x] which is right in front of the Lane
